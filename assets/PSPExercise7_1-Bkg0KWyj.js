import{_ as e}from"./CodeTutorial-CNvGhDjN.js";import{c as o,o as t,e as n,d as a}from"./index-qtLh_uQg.js";const l={code:`def example_function(no1, no2):
  print(no1, no2)

example_function(no2=3, no1=4)`,steps:[{lineNumber:0,explanation:"<p>This tutorial demonstrates <strong>keyword arguments</strong> in Python.</p><p>When calling a function, you can specify which parameter each argument corresponds to by using the parameter name.</p>",highlightLines:[],boxes:[{title:"Global memory",values:{}},{title:"example_function memory",values:{}},{title:"Output",values:[]}]},{lineNumber:0,explanation:"<p>Define a function <code>example_function</code> with two parameters: <code>no1</code> and <code>no2</code>.</p>",highlightLines:[0],boxes:[{title:"Global memory",values:{}},{title:"example_function memory",values:{}},{title:"Output",values:[]}]},{lineNumber:3,explanation:"<p>Call <code>example_function</code> using <strong>keyword arguments</strong>.</p><p>Instead of relying on position, we explicitly specify: <code>no2=3</code> and <code>no1=4</code>.</p><p>Notice the order is reversed from the function definition, but Python assigns the values correctly based on the parameter names.</p>",highlightLines:[3],boxes:[{title:"Global memory",values:{}},{title:"example_function memory",values:{}},{title:"Output",values:[]}]},{lineNumber:0,explanation:"<p>Enter <code>example_function</code>.</p><p>The keyword arguments are assigned to the correct parameters:</p><ul><li><code>no1</code> gets the value <code>4</code> (from <code>no1=4</code>)</li><li><code>no2</code> gets the value <code>3</code> (from <code>no2=3</code>)</li></ul>",highlightLines:[0,3],boxes:[{title:"Global memory",values:{}},{title:"example_function memory",values:{no1:{value:4,highlight:!0},no2:{value:3,highlight:!0}},connections:[{from:"no1",toValue:"4"},{from:"no2",toValue:"3"}]},{title:"Output",values:[]}]},{lineNumber:1,explanation:"<p>Print <code>no1</code> and <code>no2</code>.</p><p>The output is <code>4 3</code> because:</p><ul><li><code>no1</code> is <code>4</code></li><li><code>no2</code> is <code>3</code></li></ul><p>Even though we passed <code>no2</code> first in the function call, the keyword names ensured the values went to the correct parameters.</p>",highlightLines:[1,3],boxes:[{title:"Global memory",values:{}},{title:"example_function memory",values:{no1:4,no2:3},connections:[{from:"no1",toValue:"4"},{from:"no2",toValue:"3"}]},{title:"Output",values:[]}]},{lineNumber:3,explanation:"<p>The function ends and returns to line 4.</p>",highlightLines:[3],boxes:[{title:"Global memory",values:{}},{title:"example_function memory",values:{}},{title:"Output",values:["4 3"]}]},{lineNumber:3,explanation:"<p>The program ends.</p><p><strong>Key takeaway:</strong> Keyword arguments allow you to specify which parameter each argument corresponds to by name. This means:</p><ul><li>You can pass arguments in any order</li><li>The code is more readable and self-documenting</li><li>You can skip optional parameters (when combined with default values)</li></ul>",boxes:[{title:"Global memory",values:{}},{title:"example_function memory",values:{}},{title:"Output",values:["4 3"]}]}]},i={class:"container mx-auto p-4 max-w-[1024px]"},p={__name:"PSPExercise7_1",setup(s){return(r,u)=>(t(),o("div",i,[n(e,{tutorial:a(l),language:"python"},null,8,["tutorial"])]))}};export{p as default};
