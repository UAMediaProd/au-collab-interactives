import{_ as o}from"./CodeTutorial-CNvGhDjN.js";import{c as l,o as n,a as t,e as i,d as a}from"./index-qtLh_uQg.js";const s={code:`new_variable = 25
another_variable = 30
new_variable = 10
print(new_variable)`,steps:[{lineNumber:0,explanation:"We initialize <code>new_variable</code> with the value <code>25</code>.",highlightLines:[0],boxes:[{title:"Memory",values:{new_variable:25}}]},{lineNumber:1,explanation:"We create <code>another_variable</code> with value <code>30</code>. Note that <code>new_variable</code> still holds the value <code>25</code>.",highlightLines:[1],boxes:[{title:"Memory",values:{new_variable:25,another_variable:30}}]},{lineNumber:2,explanation:"We reassign <code>new_variable</code> with value <code>10</code>. This overwrites its previous value of <code>25</code>.",highlightLines:[2],boxes:[{title:"Memory",values:{new_variable:10,another_variable:30}}]},{lineNumber:3,explanation:"We <code>print</code> the current value of <code>new_variable</code>, which is <code>10</code>. The previous value of <code>25</code> is completely gone.",highlightLines:[3],boxes:[{title:"Memory",values:{new_variable:10,another_variable:30}},{title:"Output",values:["10"]}]}]},r={code:`# A simple for loop example
total = 0
for i in range(1, 4):
    print(f"Adding {i}")
    total = total + i
print(f"Final total: {total}")`,steps:[{lineNumber:0,explanation:"This is a comment explaining our code. Comments start with <code>#</code> and are ignored by Python.",highlightLines:[0],boxes:[{title:"Memory",values:{}}]},{lineNumber:1,explanation:"We initialize a variable called <code>total</code> with a value of <code>0</code>. This will be used to accumulate a sum.",highlightLines:[1],boxes:[{title:"Memory",values:{total:0}}]},{lineNumber:2,explanation:"We start a <code>for</code> loop that will iterate through the values <code>1</code>, <code>2</code>, and <code>3</code>. The variable <code>i</code> will take each value one at a time.",highlightLines:[2],boxes:[{title:"Memory",values:{total:0}}]},{lineNumber:3,explanation:"First iteration: <code>i = 1</code>. We <code>print</code> the value of <code>i</code> that we're adding.",highlightLines:[3],boxes:[{title:"Memory",values:{total:0,i:1}},{title:"Output",values:["Adding 1"]}]},{lineNumber:4,explanation:"First iteration: <code>i = 1</code>. We add <code>i</code> to our <code>total</code>: <code>0 + 1 = 1</code>.",highlightLines:[4],boxes:[{title:"Memory",values:{total:1,i:1}},{title:"Output",values:["Adding 1"]}]},{lineNumber:2,explanation:"We return to the <code>for</code> loop condition. Since <code>i = 1</code> is not the end of our range, we continue to the next iteration with <code>i = 2</code>.",highlightLines:[2],boxes:[{title:"Memory",values:{total:1,i:1}},{title:"Output",values:["Adding 1"]}]},{lineNumber:3,explanation:"Second iteration: <code>i = 2</code>. We <code>print</code> the value of <code>i</code> that we're adding.",highlightLines:[3],boxes:[{title:"Memory",values:{total:1,i:2}},{title:"Output",values:["Adding 1","Adding 2"]}]},{lineNumber:4,explanation:"Second iteration: <code>i = 2</code>. We add <code>i</code> to our <code>total</code>: <code>1 + 2 = 3</code>.",highlightLines:[4],boxes:[{title:"Memory",values:{total:3,i:2}},{title:"Output",values:["Adding 1","Adding 2"]}]},{lineNumber:2,explanation:"We return to the <code>for</code> loop condition again. Since <code>i = 2</code> is not the end of our range, we continue to the next iteration with <code>i = 3</code>.",highlightLines:[2],boxes:[{title:"Memory",values:{total:3,i:2}},{title:"Output",values:["Adding 1","Adding 2"]}]},{lineNumber:3,explanation:"Third iteration: <code>i = 3</code>. We <code>print</code> the value of <code>i</code> that we're adding.",highlightLines:[3],boxes:[{title:"Memory",values:{total:3,i:3}},{title:"Output",values:["Adding 1","Adding 2","Adding 3"]}]},{lineNumber:4,explanation:"Third iteration: <code>i = 3</code>. We add <code>i</code> to our <code>total</code>: <code>3 + 3 = 6</code>.",highlightLines:[4],boxes:[{title:"Memory",values:{total:6,i:3}},{title:"Output",values:["Adding 1","Adding 2","Adding 3"]}]},{lineNumber:2,explanation:"We return to the <code>for</code> loop condition. Now <code>i = 3</code> is the end of our range, so we exit the loop.",highlightLines:[2],boxes:[{title:"Memory",values:{total:6,i:3}},{title:"Output",values:["Adding 1","Adding 2","Adding 3"]}]},{lineNumber:5,explanation:"We <code>print</code> the final value of our <code>total</code>, which is <code>6</code>.",highlightLines:[5],boxes:[{title:"Memory",values:{total:6,i:3}},{title:"Output",values:["Adding 1","Adding 2","Adding 3","Final total: 6"]}]}]},d={code:`def calculate_sum(a, b):
    """Calculate the sum of two numbers."""
    result = a + b
    return result

def main():
    x = 5
    y = 7
    total = calculate_sum(x, y)
    print(f"The sum of {x} and {y} is {total}")

# Call the main function
main()`,steps:[{lineNumber:0,explanation:"We define a function named <code>calculate_sum</code> that takes two parameters: <code>a</code> and <code>b</code>. This function will add these two values together.",highlightLines:[0],boxes:[{title:"Memory (calculate_sum)",values:{}},{title:"Memory (main)",values:{}}]},{lineNumber:1,explanation:"This is a docstring - a special comment that describes what the function does. It helps other programmers understand the purpose of our function.",highlightLines:[1],boxes:[{title:"Memory",values:{}}]},{lineNumber:2,explanation:"Inside our function, we create a variable called <code>result</code> and assign it the value of <code>a + b</code>.",highlightLines:[2],boxes:[{title:"Memory",values:{}}]},{lineNumber:3,explanation:"We <code>return</code> the result value to whatever code called this function.",highlightLines:[3],boxes:[{title:"Memory",values:{}}]},{lineNumber:5,explanation:"Now we define another function called <code>main</code>. This will be the primary function that drives our program.",highlightLines:[5],boxes:[{title:"Memory",values:{}}]},{lineNumber:6,explanation:"Inside the main function, we create a variable <code>x</code> with the value <code>5</code>.",highlightLines:[6],boxes:[{title:"Memory",values:{x:5}}]},{lineNumber:7,explanation:"We create another variable <code>y</code> with the value <code>7</code>.",highlightLines:[7],boxes:[{title:"Memory",values:{x:5,y:7}}]},{lineNumber:8,explanation:"We call our <code>calculate_sum</code> function, passing <code>x</code> and <code>y</code> as arguments, and store the result in a variable called <code>total</code>.",highlightLines:[8],boxes:[{title:"Memory",values:{x:5,y:7}}]},{lineNumber:0,explanation:"Execution jumps to the <code>calculate_sum</code> function. Now <code>a</code> equals <code>5</code> (the value of <code>x</code>) and <code>b</code> equals <code>7</code> (the value of <code>y</code>).",highlightLines:[0],boxes:[{title:"Memory",values:{a:5,b:7,x:5,y:7}}]},{lineNumber:2,explanation:"We calculate <code>a + b</code>, which is <code>5 + 7 = 12</code>, and store it in the variable <code>result</code>.",highlightLines:[2],boxes:[{title:"Memory",values:{a:5,b:7,result:12,x:5,y:7}}]},{lineNumber:3,explanation:"We <code>return</code> the result (<code>12</code>) back to where the function was called.",highlightLines:[3],boxes:[{title:"Memory",values:{a:5,b:7,result:12,x:5,y:7}}]},{lineNumber:8,explanation:"Back in the <code>main</code> function, the call to <code>calculate_sum(x, y)</code> completes and returns <code>12</code>, which is assigned to the <code>total</code> variable.",highlightLines:[8],boxes:[{title:"Memory",values:{x:5,y:7,total:12}}]},{lineNumber:9,explanation:"We <code>print</code> out a message showing the sum of our two numbers.",highlightLines:[9],boxes:[{title:"Memory",values:{x:5,y:7,total:12}},{title:"Output",values:["The sum of 5 and 7 is 12"]}]},{lineNumber:12,explanation:"Finally, we call the <code>main</code> function to execute our program.",highlightLines:[12],boxes:[{title:"Memory",values:{}}]},{lineNumber:5,explanation:"Execution jumps to the <code>main</code> function.",highlightLines:[5],boxes:[{title:"Memory",values:{}}]},{lineNumber:6,explanation:"Inside <code>main</code>, we set <code>x</code> to <code>5</code>.",highlightLines:[6],boxes:[{title:"Memory",values:{x:5}}]},{lineNumber:7,explanation:"We set <code>y</code> to <code>7</code>.",highlightLines:[7],boxes:[{title:"Memory",values:{x:5,y:7}}]},{lineNumber:8,explanation:"We call <code>calculate_sum(x, y)</code> as we saw before.",highlightLines:[8],boxes:[{title:"Memory",values:{x:5,y:7}}]},{lineNumber:9,explanation:"We print the result: <code>The sum of 5 and 7 is 12</code>.",highlightLines:[9],boxes:[{title:"Memory",values:{x:5,y:7,total:12}},{title:"Output",values:["The sum of 5 and 7 is 12"]}]}]},c={code:`new_variable = 25
another_variable = 30
new_variable = 10
print(new_variable)`,steps:[{lineNumber:0,explanation:"<p>In this interactive, we will outline a systematic approach for solving problems of the sort where a block of code is given and you are asked to figure out what output it will generate.</p><p>First, lets specify the approach. Then, we’ll go through a few examples and apply it properly. Lets begin. ​</p>",highlightLines:[],boxes:[{title:"Memory",values:{}},{title:"Output",values:[]}]},{lineNumber:0,explanation:"<p><strong>Process one line at a time.</strong></p><p>You have to think like the computer – one line at a time, and in logical order. Make sure that you always understand which line will be executed next. Do not get lost or forget where you are up to. If this happens, you might have to start over, so keep track with a pencil.</p> ",highlightLines:[],boxes:[{title:"Memory",values:{}},{title:"Output",values:[]}]},{lineNumber:0,explanation:"<p><strong>Take note of any variable assignments in the current line. Write them down.</strong></p><p>Keep a piece of scrap paper handy. Each time you process a line of code, write down any new variables introduced in that line, or any changes to an existing variable. This is to keep an account of the current state of computer memory.</p><p><em>The highlighted line of code represents the next line to be executed.</em></p>",highlightLines:[0],boxes:[{title:"Memory",values:{}},{title:"Output",values:[]}]},{lineNumber:0,highlightLines:[1],boxes:[{title:"Memory",values:{new_variable:25},connections:[{from:"new_variable",toValue:"25"}]},{title:"Output",values:[]}]},{lineNumber:1,highlightLines:[2],boxes:[{title:"Memory",values:{new_variable:25,another_variable:30},connections:[{from:"new_variable",toValue:"25"},{from:"another_variable",toValue:"30"}]},{title:"Output",values:[]}]},{lineNumber:2,highlightLines:[3],boxes:[{title:"Memory",values:{_0:{value:10,named:!1},new_variable:25,another_variable:30},connections:[{from:"new_variable",toValue:"10"},{from:"another_variable",toValue:"30"}]},{title:"Output",values:[]}]},{lineNumber:3,explanation:"<p><strong>If there is a print statement, write down in a separate area any output generated.</strong></p><p>Whenever you encounter a print statement, write down what will be displayed in an output area, just like the computer does. When the program ends, this area contains the final answer to the question.</p>",highlightLines:[4],boxes:[{title:"Memory",values:{_0:{value:10,named:!1},new_variable:25,another_variable:30},connections:[{from:"new_variable",toValue:"10"},{from:"another_variable",toValue:"30"}]},{title:"Output",values:["10"]}]}]},u={code:`# Initial code example
x = 5
y = 10
print(x + y)`,steps:[{lineNumber:0,explanation:"<p>This is our first code example. It's a simple addition of two variables.</p>",highlightLines:[0],boxes:[{title:"Memory",values:{}}]},{lineNumber:1,explanation:"<p>We set variable <code>x</code> to <code>5</code>.</p>",highlightLines:[1],boxes:[{title:"Memory",values:{x:5}}]},{lineNumber:2,explanation:"<p>We set variable <code>y</code> to <code>10</code>.</p>",highlightLines:[2],boxes:[{title:"Memory",values:{x:5,y:10}}]},{lineNumber:3,explanation:"<p>We print the sum of <code>x</code> and <code>y</code>.</p>",highlightLines:[3],boxes:[{title:"Memory",values:{x:5,y:10}},{title:"Output",values:["15"]}]},{lineNumber:0,explanation:"<p><strong>Now let's look at a different example.</strong> This one demonstrates a simple multiplication.</p>",highlightLines:[0],code:`# Second code example
a = 7
b = 3
print(a * b)`,boxes:[{title:"Memory",values:{}}]},{lineNumber:1,explanation:"<p>We set variable <code>a</code> to <code>7</code>.</p>",highlightLines:[1],boxes:[{title:"Memory",values:{a:7}}]},{lineNumber:2,explanation:"<p>We set variable <code>b</code> to <code>3</code>.</p>",highlightLines:[2],boxes:[{title:"Memory",values:{a:7,b:3}}]},{lineNumber:3,explanation:"<p>We print the product of <code>a</code> and <code>b</code>.</p>",highlightLines:[3],boxes:[{title:"Memory",values:{a:7,b:3}},{title:"Output",values:["21"]}]},{lineNumber:0,explanation:"<p><strong>Let's try one more example.</strong> This one shows string concatenation.</p>",highlightLines:[0],code:`# Third code example
first_name = "Jane"
last_name = "Doe"
print(first_name + " " + last_name)`,boxes:[{title:"Memory",values:{}}]},{lineNumber:1,explanation:'<p>We set <code>first_name</code> to <code>"Jane"</code>.</p>',highlightLines:[1],boxes:[{title:"Memory",values:{first_name:'"Jane"'}}]},{lineNumber:2,explanation:'<p>We set <code>last_name</code> to <code>"Doe"</code>.</p>',highlightLines:[2],boxes:[{title:"Memory",values:{first_name:'"Jane"',last_name:'"Doe"'}}]},{lineNumber:3,explanation:"<p>We print the concatenated full name.</p>",highlightLines:[3],boxes:[{title:"Memory",values:{first_name:'"Jane"',last_name:'"Doe"'}},{title:"Output",values:["Jane Doe"]}]}]},h={code:`# Example showing variable references
x = 42
y = x
z = y`,steps:[{lineNumber:0,explanation:"<p>This example demonstrates using <code>toKey</code> to show variable references.</p>",highlightLines:[0],boxes:[{title:"Memory",values:{}}]},{lineNumber:1,explanation:"<p>We assign <code>42</code> to variable <code>x</code>.</p>",highlightLines:[1],boxes:[{title:"Memory",values:{x:42},connections:[{from:"x",toKey:"x"}]}]},{lineNumber:2,explanation:"<p>We assign the value of <code>x</code> to <code>y</code>. This creates a reference where <code>y</code> points to the same value as <code>x</code>.</p>",highlightLines:[2],boxes:[{title:"Memory",values:{x:42,y:42},connections:[{from:"x",toKey:"x"},{from:"y",toKey:"x"}]}]},{lineNumber:3,explanation:"<p>Now we assign <code>y</code> to <code>z</code>. Since <code>y</code> is 42, <code>z</code> gets 42 as well.</p>",highlightLines:[3],boxes:[{title:"Memory",values:{x:42,y:42,z:42},connections:[{from:"x",toKey:"x"},{from:"y",toKey:"x"},{from:"z",toKey:"x"}]}]},{lineNumber:3,explanation:"<p>We can also demonstrate the new <code>toKey</code> connection type. This directly shows that <code>z</code> refers to <code>y</code>'s value.</p>",highlightLines:[3],boxes:[{title:"Memory",values:{x:42,y:42,z:42},connections:[{from:"x",toValue:"42"},{from:"y",toKey:"x"},{from:"z",toKey:"y"}]}]}]},m={code:`# Example showing multiple unnamed values
a = 10
b = 20
c = 30
result = [a, b, c]`,steps:[{lineNumber:0,explanation:"<p>This example demonstrates using metadata to display multiple unnamed values in memory.</p>",highlightLines:[0],boxes:[{title:"Memory",values:{}}]},{lineNumber:1,explanation:"<p>We assign <code>10</code> to variable <code>a</code>.</p>",highlightLines:[1],boxes:[{title:"Memory",values:{a:{value:10}}}]},{lineNumber:2,explanation:"<p>We assign <code>20</code> to variable <code>b</code>.</p>",highlightLines:[2],boxes:[{title:"Memory",values:{a:{value:10},b:{value:20}}}]},{lineNumber:3,explanation:"<p>We assign <code>30</code> to variable <code>c</code>.</p>",highlightLines:[3],boxes:[{title:"Memory",values:{a:{value:10},b:{value:20},c:{value:30}}}]},{lineNumber:4,explanation:"<p>We create a list containing the values of <code>a</code>, <code>b</code>, and <code>c</code>. In memory, the list appears as multiple unnamed values.</p>",highlightLines:[4],boxes:[{title:"Memory",values:{a:{value:10},b:{value:20},c:{value:30},result:{value:"list"},_0:{value:10,named:!1},_1:{value:20,named:!1},_2:{value:30,named:!1}},connections:[{from:"result",toKey:"_0"},{from:"a",toKey:"_0"},{from:"b",toKey:"_1"},{from:"c",toKey:"_2"}]}]}]},p={class:"container mx-auto p-4 w-[1100px]"},b={class:"mb-8"},g={class:"mb-8"},v={class:"mb-8"},x={class:"mb-8"},y={class:"mb-8"},f={class:"mb-8"},w={class:"mb-8"},W={__name:"PSPInteractiveCodingTemplate",setup(N){return(_,e)=>(n(),l("div",p,[e[7]||(e[7]=t("h1",{class:"text-2xl font-bold mb-6"},"Interactive Coding Tutorials",-1)),t("div",b,[e[0]||(e[0]=t("h2",{class:"mb-4"},"What is the output produced by the following code?",-1)),i(o,{tutorial:a(c),language:"python"},null,8,["tutorial"])]),t("div",g,[e[1]||(e[1]=t("h2",{class:"mb-4"},"Unnamed Values Example",-1)),i(o,{tutorial:a(m),language:"python"},null,8,["tutorial"])]),t("div",v,[e[2]||(e[2]=t("h2",{class:"mb-4"},"Variable References Example (toKey)",-1)),i(o,{tutorial:a(h),language:"python"},null,8,["tutorial"])]),t("div",x,[e[3]||(e[3]=t("h2",{class:"mb-4"},"Multiple Code Examples Tutorial",-1)),i(o,{tutorial:a(u),language:"python"},null,8,["tutorial"])]),t("div",y,[e[4]||(e[4]=t("h2",{class:"mb-4"},"Variables Tutorial",-1)),i(o,{tutorial:a(s),language:"python"},null,8,["tutorial"])]),t("div",f,[e[5]||(e[5]=t("h2",{class:"mb-4"},"Loops Tutorial",-1)),i(o,{tutorial:a(r),language:"python"},null,8,["tutorial"])]),t("div",w,[e[6]||(e[6]=t("h2",{class:"mb-4"},"Functions Tutorial",-1)),i(o,{tutorial:a(d),language:"python"},null,8,["tutorial"])])]))}};export{W as default};
